generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // bcrypt hash
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Organization relationship
  organizations       Organization[]
  sentInvitations     OrganizationInvitation[] @relation("SentInvitations")

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Credits
  creditBalance Int @default(0)
  
  // Relationships
  users             User[]
  apps              App[]
  invitations       OrganizationInvitation[]
  creditTransactions OrganizationCreditTransaction[]
  orgUserAccounts   OrgUserAccount[]

  @@map("organizations")
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  invitedBy      String
  inviteToken    String       @unique
  expiresAt      DateTime
  status         String       @default("PENDING") // PENDING, ACCEPTED, EXPIRED, REVOKED
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User         @relation("SentInvitations", fields: [invitedBy], references: [id])
  
  @@unique([organizationId, email])
  @@index([inviteToken])
  @@index([email])
  @@index([status])
  @@map("organization_invitations")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apps      App[]

  @@map("tenants")
}

model App {
  id                          String        @id @default(cuid())
  tenantId                    String?
  organizationId              String?       // New field for organization relationship
  name                        String
  domain                      String
  corsOrigins                 String[]      @default([])
  redirectUrl                 String
  policyJson                  Json
  emailTemplates              Json?
  metadata                    Json?         // Product waitlists config and other metadata
  isActive                    Boolean       @default(true)
  publicKey                   String?       @unique
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  autoInviteEnabled           Boolean       @default(false)
  dailyInviteQuota            Int           @default(10)
  inviteTime                  String        @default("09:00")
  masterReferralCode          String?       @unique
  masterReferralCredits       Int           @default(10)
  waitlistEnabled             Boolean       @default(false)
  waitlistEnabledAt           DateTime?
  waitlistMessages            String[]      @default([])
  waitlistLayout              String        @default("centered")
  description                 String?
  logoUrl                     String?
  primaryColor                String?
  backgroundColor             String?
  cardBackgroundColor         String?
  hideGrowthKitBranding       Boolean       @default(false)
  trackUsdValue               Boolean       @default(false)
  allowCustomCredits          Boolean       @default(true)
  maxCustomCredits            Int           @default(100)
  initialCreditsPerDay        Int           @default(3)
  creditsForName              Int           @default(1)
  creditsForEmail             Int           @default(1)
  creditsForEmailVerification Int           @default(1)
  maxCreditBalance            Int?
  creditsPaused               Boolean       @default(false)
  creditsPausedAt             DateTime?
  isolatedAccounts            Boolean       @default(true)
  apiKeys                     ApiKey[]
  tenant                      Tenant?       @relation(fields: [tenantId], references: [id])
  organization                Organization? @relation(fields: [organizationId], references: [id])
  eventLogs                   EventLog[]
  fingerprints                Fingerprint[]
  leads                       Lead[]
  referrals                   Referral[]
  waitlist                    Waitlist[]
  activities                  Activity[]
  chatConfig                  ChatConfiguration?
  chatConversations           ChatConversation[]
  chatBookings                ChatBooking[]

  @@index([tenantId])
  @@index([organizationId])
  @@index([domain])
  @@map("apps")
}

model ApiKey {
  id         String    @id @default(cuid())
  appId      String
  keyHint    String
  hashedKey  String
  scope      String    @default("full")
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String    @default("API Key")
  app        App       @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([keyHint])
  @@map("api_keys")
}

model Fingerprint {
  id             String     @id @default(cuid())
  appId          String
  fingerprint    String     // Primary: FingerprintJS (client-side, most unique)
  fingerprint2   String?    // Secondary: Canvas fingerprint (client-side, very unique)
  fingerprint3   String?    // Tertiary: Browser signature hash (client-side, fairly unique)
  serverFingerprint String? // Fallback: Server-side (IP + headers + screen, least unique)
  referralCode   String?    @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastDailyGrant DateTime?
  lastActiveAt   DateTime?
  browser        String?
  device         String?
  location       Json?
  // Language tracking fields
  browserLanguage   String?   // Detected from navigator.language
  preferredLanguage String?   // User-selected language preference ('en', 'es')
  languageSource    String?   // 'browser_detected', 'user_selected', 'default'
  languageUpdatedAt DateTime? // When language preference was last updated
  // Shared accounts
  orgUserAccountId  String?   // Link to consolidated account (null for isolated apps)
  credits        Credit[]
  app            App        @relation(fields: [appId], references: [id], onDelete: Cascade)
  leads          Lead[]
  referredBy     Referral?  @relation("Referred")
  referrals      Referral[] @relation("Referrer")
  usage          Usage[]
  activities     Activity[]
  orgUserAccount OrgUserAccount? @relation(fields: [orgUserAccountId], references: [id])
  chatConversations ChatConversation[]

  @@unique([appId, fingerprint])
  @@index([appId])
  @@index([fingerprint])
  @@index([fingerprint2])
  @@index([fingerprint3])
  @@index([serverFingerprint])
  @@index([referralCode])
  @@index([preferredLanguage])
  @@index([browserLanguage])
  @@index([orgUserAccountId])
  @@map("fingerprints")
}

model Credit {
  id            String      @id @default(cuid())
  fingerprintId String
  amount        Int
  reason        String
  metadata      Json?
  createdAt     DateTime    @default(now())
  fingerprint   Fingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)

  @@index([fingerprintId])
  @@index([reason])
  @@index([createdAt])
  @@map("credits")
}

model Usage {
  id            String      @id @default(cuid())
  fingerprintId String
  action        String
  metadata      Json?
  createdAt     DateTime    @default(now())
  usdValue      Decimal?    @db.Decimal(10, 2)
  fingerprint   Fingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)

  @@index([fingerprintId])
  @@index([action])
  @@index([usdValue])
  @@index([createdAt])
  @@map("usage")
}

model Referral {
  id             String       @id @default(cuid())
  appId          String
  referrerId     String
  referredId     String?      @unique
  claimToken     String?      @unique
  claimExpiresAt DateTime?
  visitCount     Int          @default(0)
  lastVisitAt    DateTime?
  claimedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  app            App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  referred       Fingerprint? @relation("Referred", fields: [referredId], references: [id])
  referrer       Fingerprint  @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([referrerId])
  @@index([referredId])
  @@index([claimToken])
  @@map("referrals")
}

model Lead {
  id              String       @id @default(cuid())
  appId           String
  fingerprintId   String?
  name            String?
  email           String?
  emailVerified   Boolean      @default(false)
  verifyToken     String?      @unique
  verifyExpiresAt DateTime?
  metadata        Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  app             App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  fingerprint     Fingerprint? @relation(fields: [fingerprintId], references: [id])

  @@unique([appId, email])
  @@unique([appId, fingerprintId])
  @@index([appId])
  @@index([fingerprintId])
  @@index([email])
  @@index([verifyToken])
  @@map("leads")
}

model Waitlist {
  id              String    @id @default(cuid())
  appId           String
  email           String
  productTag      String?   // Product identifier for product-specific waitlists (null = app-level)
  status          String    @default("WAITING")
  position        Int?
  invitedAt       DateTime?
  acceptedAt      DateTime?
  metadata        Json?     // Custom field responses stored here
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  convertedAt     DateTime?
  invitationEmail String?
  invitedVia      String?
  codeExpiresAt   DateTime?
  codeUsedAt      DateTime?
  fingerprintId   String?
  invitationCode  String?
  maxUses         Int       @default(1)
  useCount        Int       @default(0)
  app             App       @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, email, productTag])
  @@unique([appId, invitationCode])
  @@index([appId])
  @@index([appId, productTag])
  @@index([status])
  @@index([position])
  @@index([invitationCode])
  @@index([fingerprintId])
  @@map("waitlist")
}

model EventLog {
  id         String   @id @default(cuid())
  appId      String
  event      String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  app        App      @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([event])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("event_logs")
}

model Activity {
  id            String   @id @default(cuid())
  appId         String
  fingerprintId String
  eventName     String
  properties    Json?
  context       Json
  sessionId     String
  timestamp     DateTime @default(now())

  app         App         @relation(fields: [appId], references: [id], onDelete: Cascade)
  fingerprint Fingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)

  @@index([appId, timestamp])
  @@index([fingerprintId, timestamp])
  @@index([appId, eventName])
  @@map("activities")
}

model AdminActivity {
  id         String   @id @default(cuid())
  action     String // e.g., "app_created", "user_paused", "credits_issued"
  targetType String? // e.g., "app", "user", "waitlist"
  targetId   String? // ID of the affected entity
  metadata   Json? // Additional context
  timestamp  DateTime @default(now())

  @@index([action])
  @@index([targetType, targetId])
  @@index([timestamp])
  @@map("admin_activities")
}

model OrganizationCreditTransaction {
  id             String       @id @default(cuid())
  organizationId String
  amount         Int          // positive for add, negative for spend
  type           String       // "ADMIN_ADD", "EMAIL_SEND", "FEATURE_USE", etc.
  description    String?      // optional human-readable note
  createdAt      DateTime     @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId, createdAt])
  @@map("organization_credit_transactions")
}

model OrgUserAccount {
  id               String    @id @default(cuid())
  organizationId   String
  name             String?
  email            String?
  emailVerified    Boolean   @default(false)
  profileMetadata  Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastActiveAt     DateTime?
  
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  fingerprints     Fingerprint[]
  
  @@index([organizationId])
  @@index([email])
  @@map("org_user_accounts")
}

// ============================================
// CHAT MODELS - MVP Stage 1
// ============================================

model ChatConfiguration {
  id                    String    @id @default(cuid())
  appId                 String    @unique
  enabled               Boolean   @default(false)
  systemPrompt          String?   @db.Text
  botName               String    @default("Assistant")
  welcomeMessage        String?
  
  // Feature toggles (all enabled by default for MVP)
  enableCalendar        Boolean   @default(true)
  enableHumanHandoff    Boolean   @default(true)
  enableRAG             Boolean   @default(true)
  
  // LLM configuration
  llmProvider           String    @default("groq")
  llmModel              String    @default("openai/gpt-oss-120b")
  maxContextLength      Int       @default(8000)
  
  // Advanced features for later stages
  enableAnalytics       Boolean   @default(true)
  fallbackMessage       String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  app                   App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  conversations         ChatConversation[]
  knowledgeDocuments    ChatKnowledgeDocument[]
  calendarConfig        ChatCalendarConfig?
  
  @@map("chat_configurations")
}

model ChatConversation {
  id                    String    @id @default(cuid())
  appId                 String
  configId              String
  fingerprintId         String
  sessionId             String    @unique
  status                String    @default("active") // active, ended, taken_over, archived
  humanTakeoverAt       DateTime?
  humanTakeoverBy       String?
  endedAt               DateTime?
  metadata              Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  app                   App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  config                ChatConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  fingerprint           Fingerprint @relation(fields: [fingerprintId], references: [id])
  messages              ChatMessage[]
  conversationInsights  ChatConversationInsights?
  bookings              ChatBooking[]
  
  @@index([appId, createdAt])
  @@index([fingerprintId])
  @@index([status])
  @@map("chat_conversations")
}

model ChatMessage {
  id              String    @id @default(cuid())
  conversationId  String
  role            String    // user, assistant, system
  content         String    @db.Text
  metadata        Json?
  creditsUsed     Int       @default(0)
  createdAt       DateTime  @default(now())
  
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt])
  @@map("chat_messages")
}

model ChatKnowledgeDocument {
  id           String    @id @default(cuid())
  configId     String
  title        String
  content      String    @db.Text
  sourceType   String    // upload, url, manual
  sourceUrl    String?
  status       String    @default("processing") // processing, ready, error
  chunkCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  config       ChatConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  chunks       ChatKnowledgeChunk[]
  
  @@index([configId])
  @@map("chat_knowledge_documents")
}

model ChatKnowledgeChunk {
  id           String    @id @default(cuid())
  documentId   String
  content      String    @db.Text
  chunkIndex   Int
  metadata     Json?
  upstashId    String?   // Upstash Vector ID for this chunk
  
  document     ChatKnowledgeDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([upstashId])
  @@map("chat_knowledge_chunks")
}

model ChatCalendarConfig {
  id                String    @id @default(cuid())
  configId          String    @unique
  timezone          String    @default("America/New_York")
  workingHours      Json      // { monday: {start: "09:00", end: "17:00"}, ... }
  bufferMinutes     Int       @default(15)
  maxDaysOut        Int       @default(30)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  config            ChatConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  meetingTypes      ChatMeetingType[]
  
  @@map("chat_calendar_configs")
}

model ChatMeetingType {
  id                String    @id @default(cuid())
  calendarConfigId  String
  name              String
  description       String?
  durationMinutes   Int
  bufferBefore      Int       @default(0)
  bufferAfter       Int       @default(0)
  isActive          Boolean   @default(true)
  color             String    @default("#3B82F6")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  calendarConfig    ChatCalendarConfig @relation(fields: [calendarConfigId], references: [id], onDelete: Cascade)
  bookings          ChatBooking[]
  
  @@index([calendarConfigId])
  @@map("chat_meeting_types")
}

model ChatBooking {
  id              String    @id @default(cuid())
  appId           String
  meetingTypeId   String
  conversationId  String?
  attendeeName    String
  attendeeEmail   String
  startTime       DateTime
  endTime         DateTime
  status          String    @default("confirmed") // confirmed, cancelled, completed
  notes           String?
  meetingLink     String?
  cancellationReason String?
  cancelledAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  app             App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  meetingType     ChatMeetingType @relation(fields: [meetingTypeId], references: [id])
  conversation    ChatConversation? @relation(fields: [conversationId], references: [id])
  
  @@index([appId, startTime])
  @@index([attendeeEmail])
  @@index([status])
  @@map("chat_bookings")
}

model ChatConversationInsights {
  id              String    @id @default(cuid())
  conversationId  String    @unique
  interests       String[]  @default([])
  painPoints      String[]  @default([])
  intent          String?
  urgency         Int?
  sentiment       String?
  featuresDiscussed String[] @default([])
  objections      String[]  @default([])
  budgetIndicators String[]  @default([])
  extractedAt     DateTime  @default(now())
  
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([intent])
  @@index([urgency])
  @@map("chat_conversation_insights")
}
