generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apps      App[]

  @@map("tenants")
}

model App {
  id                          String        @id @default(cuid())
  tenantId                    String?
  name                        String
  domain                      String
  corsOrigins                 String[]      @default([])
  redirectUrl                 String
  policyJson                  Json
  emailTemplates              Json?
  isActive                    Boolean       @default(true)
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  autoInviteEnabled           Boolean       @default(false)
  dailyInviteQuota            Int           @default(10)
  inviteTime                  String        @default("09:00")
  masterReferralCode          String?       @unique
  masterReferralCredits       Int           @default(10)
  waitlistEnabled             Boolean       @default(false)
  waitlistMessage             String?
  trackUsdValue               Boolean       @default(false)
  allowCustomCredits          Boolean       @default(true)
  maxCustomCredits            Int           @default(100)
  initialCreditsPerDay        Int           @default(3)
  creditsForName              Int           @default(1)
  creditsForEmail             Int           @default(1)
  creditsForEmailVerification Int           @default(1)
  maxCreditBalance            Int?
  apiKeys               ApiKey[]
  tenant                Tenant?       @relation(fields: [tenantId], references: [id])
  eventLogs             EventLog[]
  fingerprints          Fingerprint[]
  leads                 Lead[]
  referrals             Referral[]
  waitlist              Waitlist[]

  @@index([tenantId])
  @@index([domain])
  @@map("apps")
}

model ApiKey {
  id         String    @id @default(cuid())
  appId      String
  keyHint    String
  hashedKey  String
  scope      String    @default("full")
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String    @default("API Key")
  app        App       @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([keyHint])
  @@map("api_keys")
}

model Fingerprint {
  id             String     @id @default(cuid())
  appId          String
  fingerprint    String
  referralCode   String?    @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastDailyGrant DateTime?
  lastActiveAt   DateTime?
  credits      Credit[]
  app          App        @relation(fields: [appId], references: [id], onDelete: Cascade)
  leads        Lead[]
  referredBy   Referral?  @relation("Referred")
  referrals    Referral[] @relation("Referrer")
  usage        Usage[]

  @@unique([appId, fingerprint])
  @@index([appId])
  @@index([fingerprint])
  @@index([referralCode])
  @@map("fingerprints")
}

model Credit {
  id            String      @id @default(cuid())
  fingerprintId String
  amount        Int
  reason        String
  metadata      Json?
  createdAt     DateTime    @default(now())
  fingerprint   Fingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)

  @@index([fingerprintId])
  @@index([reason])
  @@index([createdAt])
  @@map("credits")
}

model Usage {
  id            String      @id @default(cuid())
  fingerprintId String
  action        String
  metadata      Json?
  createdAt     DateTime    @default(now())
  usdValue      Decimal?    @db.Decimal(10, 2)
  fingerprint   Fingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)

  @@index([fingerprintId])
  @@index([action])
  @@index([usdValue])
  @@index([createdAt])
  @@map("usage")
}

model Referral {
  id             String       @id @default(cuid())
  appId          String
  referrerId     String
  referredId     String?      @unique
  claimToken     String?      @unique
  claimExpiresAt DateTime?
  visitCount     Int          @default(0)
  lastVisitAt    DateTime?
  claimedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  app            App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  referred       Fingerprint? @relation("Referred", fields: [referredId], references: [id])
  referrer       Fingerprint  @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([referrerId])
  @@index([referredId])
  @@index([claimToken])
  @@map("referrals")
}

model Lead {
  id              String       @id @default(cuid())
  appId           String
  fingerprintId   String?
  name            String?
  email           String?
  emailVerified   Boolean      @default(false)
  verifyToken     String?      @unique
  verifyExpiresAt DateTime?
  metadata        Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  app             App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  fingerprint     Fingerprint? @relation(fields: [fingerprintId], references: [id])

  @@unique([appId, email])
  @@index([appId])
  @@index([fingerprintId])
  @@index([email])
  @@index([verifyToken])
  @@map("leads")
}

model Waitlist {
  id              String    @id @default(cuid())
  appId           String
  email           String
  status          String    @default("WAITING")
  position        Int?
  invitedAt       DateTime?
  acceptedAt      DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  convertedAt     DateTime?
  invitationEmail String?
  invitedVia      String?
  codeExpiresAt   DateTime?
  codeUsedAt      DateTime?
  fingerprintId   String?
  invitationCode  String?
  maxUses         Int       @default(1)
  useCount        Int       @default(0)
  app             App       @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, email])
  @@unique([appId, invitationCode])
  @@index([appId])
  @@index([status])
  @@index([position])
  @@index([invitationCode])
  @@index([fingerprintId])
  @@map("waitlist")
}

model EventLog {
  id         String   @id @default(cuid())
  appId      String
  event      String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  app        App      @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([event])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("event_logs")
}
