#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Colors for console output
const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  bold: '\x1b[1m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

function question(rl, query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function detectProjectType() {
  const cwd = process.cwd();
  
  // Check for Next.js
  if (fs.existsSync(path.join(cwd, 'next.config.js')) || 
      fs.existsSync(path.join(cwd, 'next.config.ts')) ||
      fs.existsSync(path.join(cwd, 'next.config.mjs'))) {
    return 'nextjs';
  }
  
  // Check for package.json with Next.js dependency
  const packageJsonPath = path.join(cwd, 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
      if (deps.next) {
        return 'nextjs';
      }
      if (deps.react) {
        return 'react';
      }
    } catch (e) {
      // Ignore JSON parse errors
    }
  }
  
  return 'unknown';
}

function createMiddlewareFile() {
  const middlewareContent = `// GrowthKit middleware - Zero configuration required! 🚀
// Generated by @fenixblack/growthkit setup
export { middleware, config } from '@fenixblack/growthkit/auto-middleware';
`;
  
  fs.writeFileSync('middleware.ts', middlewareContent);
  log('✅ Created middleware.ts', 'green');
}

function updateEnvFile(apiKey, apiUrl) {
  const envPath = '.env.local';
  let envContent = '';
  
  // Read existing .env.local if it exists
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
    log('📝 Found existing .env.local, updating...', 'blue');
  } else {
    log('📝 Creating .env.local...', 'blue');
  }
  
  // Remove existing GrowthKit variables
  envContent = envContent
    .split('\n')
    .filter(line => !line.startsWith('GROWTHKIT_'))
    .join('\n');
  
  // Add GrowthKit configuration
  const growthKitConfig = `
# GrowthKit Configuration (Secure Proxy Mode)
# Generated by @fenixblack/growthkit setup
GROWTHKIT_API_KEY=${apiKey}
GROWTHKIT_API_URL=${apiUrl}
`;
  
  envContent = envContent.trim() + growthKitConfig;
  fs.writeFileSync(envPath, envContent);
  log('✅ Updated .env.local with GrowthKit configuration', 'green');
}

function checkGrowthKitDependency() {
  const packageJsonPath = 'package.json';
  if (!fs.existsSync(packageJsonPath)) {
    return false;
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    return !!deps['@fenixblack/growthkit'];
  } catch (e) {
    return false;
  }
}

async function main() {
  log('🚀 GrowthKit Setup Wizard', 'bold');
  log('=====================================', 'blue');
  
  const projectType = await detectProjectType();
  
  if (projectType === 'unknown') {
    log('⚠️  Could not detect project type. This tool works best with Next.js projects.', 'yellow');
    log('You can still continue with manual setup.', 'yellow');
  } else if (projectType === 'nextjs') {
    log('✅ Next.js project detected!', 'green');
  } else if (projectType === 'react') {
    log('⚠️  React project detected. GrowthKit requires Next.js for middleware support.', 'yellow');
    log('Please set up a Next.js project first.', 'yellow');
    process.exit(1);
  }
  
  // Check if GrowthKit is installed
  const hasGrowthKit = checkGrowthKitDependency();
  if (!hasGrowthKit) {
    log('📦 Installing @fenixblack/growthkit...', 'blue');
    log('Please run: npm install @fenixblack/growthkit', 'yellow');
    log('Then run this setup again.', 'yellow');
    process.exit(0);
  }
  
  const rl = createInterface();
  
  try {
    log('\n🔑 GrowthKit API Configuration', 'bold');
    log('Get your API key from your GrowthKit dashboard or database.', 'blue');
    
    const apiKey = await question(rl, 'Enter your GrowthKit API Key: ');
    if (!apiKey.trim()) {
      log('❌ API key is required. Exiting.', 'red');
      process.exit(1);
    }
    
    const defaultApiUrl = 'https://growth.fenixblack.ai/api';
    const apiUrlPrompt = `API URL (default: ${defaultApiUrl}): `;
    const apiUrl = await question(rl, apiUrlPrompt) || defaultApiUrl;
    
    log('\n📁 Setting up files...', 'bold');
    
    // Create middleware.ts
    if (fs.existsSync('middleware.ts')) {
      const overwrite = await question(rl, 'middleware.ts already exists. Overwrite? (y/N): ');
      if (overwrite.toLowerCase() === 'y' || overwrite.toLowerCase() === 'yes') {
        createMiddlewareFile();
      } else {
        log('⏭️  Skipped middleware.ts', 'yellow');
      }
    } else {
      createMiddlewareFile();
    }
    
    // Update .env.local
    updateEnvFile(apiKey, apiUrl);
    
    log('\n🎉 Setup Complete!', 'bold');
    log('=====================================', 'green');
    log('✅ GrowthKit is now configured for your Next.js app', 'green');
    log('', 'reset');
    log('📋 Next Steps:', 'bold');
    log('1. Start your development server: npm run dev', 'blue');
    log('2. Import and use GrowthKit components in your app:', 'blue');
    log('', 'reset');
    log("   import { useGrowthKit, GrowthKitAccountWidget } from '@fenixblack/growthkit';", 'blue');
    log('', 'reset');
    log('3. Visit the GrowthKit documentation for full usage examples', 'blue');
    log('', 'reset');
    log('🔒 Security: Your API key is stored server-side only in .env.local', 'green');
    log('💡 The middleware automatically handles referrals, verification, and API proxying', 'green');
    
  } catch (error) {
    log(`❌ Setup failed: ${error.message}`, 'red');
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  log('\n👋 Setup cancelled', 'yellow');
  process.exit(0);
});

main().catch(error => {
  log(`❌ Unexpected error: ${error.message}`, 'red');
  process.exit(1);
});
