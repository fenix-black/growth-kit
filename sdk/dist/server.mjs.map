{"version":3,"sources":["../src/server.ts"],"sourcesContent":["/**\n * Server-side utilities for GrowthKit\n * These utilities are meant to be used in API routes and server components\n */\n\nimport type { NextRequest } from 'next/server';\n\nexport interface GrowthKitServerConfig {\n  apiKey: string;\n  apiUrl?: string;\n}\n\n/**\n * Server-side API client for GrowthKit\n * Use this in API routes and server components\n */\nexport class GrowthKitServer {\n  private apiKey: string;\n  private apiUrl: string;\n\n  constructor(config: GrowthKitServerConfig) {\n    this.apiKey = config.apiKey;\n    this.apiUrl = config.apiUrl || process.env.GROWTHKIT_API_URL || 'http://localhost:3000/api';\n  }\n\n  /**\n   * Get user data by fingerprint\n   */\n  async getUser(fingerprint: string) {\n    const response = await fetch(`${this.apiUrl}/v1/me`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ fingerprint }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get user: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Complete an action for a user\n   */\n  async completeAction(fingerprint: string, action: string = 'default', metadata?: any) {\n    const response = await fetch(`${this.apiUrl}/v1/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        fingerprint,\n        action,\n        metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to complete action: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Add email to waitlist\n   */\n  async addToWaitlist(email: string, fingerprint?: string, metadata?: any) {\n    const response = await fetch(`${this.apiUrl}/v1/waitlist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        email,\n        fingerprint,\n        metadata,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to add to waitlist: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Exchange referral code for claim token\n   */\n  async exchangeReferralCode(code: string) {\n    const response = await fetch(`${this.apiUrl}/v1/referral/exchange`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ code }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to exchange referral code: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n}\n\n/**\n * Extract fingerprint from request headers (if using custom header)\n */\nexport function getFingerprintFromRequest(request: NextRequest): string | null {\n  return request.headers.get('x-fingerprint');\n}\n\n/**\n * Extract referral claim from request cookies\n */\nexport function getReferralClaimFromRequest(request: NextRequest): string | null {\n  return request.cookies.get('ref_claim')?.value || null;\n}\n\n/**\n * Create a server instance with environment variables\n */\nexport function createGrowthKitServer(): GrowthKitServer {\n  const apiKey = process.env.GROWTHKIT_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('GROWTHKIT_API_KEY environment variable is required');\n  }\n  \n  return new GrowthKitServer({\n    apiKey,\n    apiUrl: process.env.GROWTHKIT_API_URL,\n  });\n}\n"],"mappings":"AAgBO,IAAMA,EAAN,KAAsB,CAI3B,YAAYC,EAA+B,CACzC,KAAK,OAASA,EAAO,OACrB,KAAK,OAASA,EAAO,QAAU,QAAQ,IAAI,mBAAqB,2BAClE,CAKA,MAAM,QAAQC,EAAqB,CACjC,IAAMC,EAAW,MAAM,MAAM,GAAG,KAAK,MAAM,SAAU,CACnD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAU,KAAK,MAAM,EACxC,EACA,KAAM,KAAK,UAAU,CAAE,YAAAD,CAAY,CAAC,CACtC,CAAC,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,UAAU,EAAE,EAG9D,OAAOA,EAAS,KAAK,CACvB,CAKA,MAAM,eAAeD,EAAqBE,EAAiB,UAAWC,EAAgB,CACpF,IAAMF,EAAW,MAAM,MAAM,GAAG,KAAK,MAAM,eAAgB,CACzD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAU,KAAK,MAAM,EACxC,EACA,KAAM,KAAK,UAAU,CACnB,YAAAD,EACA,OAAAE,EACA,SAAAC,CACF,CAAC,CACH,CAAC,EAED,GAAI,CAACF,EAAS,GACZ,MAAM,IAAI,MAAM,8BAA8BA,EAAS,UAAU,EAAE,EAGrE,OAAOA,EAAS,KAAK,CACvB,CAKA,MAAM,cAAcG,EAAeJ,EAAsBG,EAAgB,CACvE,IAAMF,EAAW,MAAM,MAAM,GAAG,KAAK,MAAM,eAAgB,CACzD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAU,KAAK,MAAM,EACxC,EACA,KAAM,KAAK,UAAU,CACnB,MAAAG,EACA,YAAAJ,EACA,SAAAG,CACF,CAAC,CACH,CAAC,EAED,GAAI,CAACF,EAAS,GACZ,MAAM,IAAI,MAAM,8BAA8BA,EAAS,UAAU,EAAE,EAGrE,OAAOA,EAAS,KAAK,CACvB,CAKA,MAAM,qBAAqBI,EAAc,CACvC,IAAMJ,EAAW,MAAM,MAAM,GAAG,KAAK,MAAM,wBAAyB,CAClE,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAU,KAAK,MAAM,EACxC,EACA,KAAM,KAAK,UAAU,CAAE,KAAAI,CAAK,CAAC,CAC/B,CAAC,EAED,GAAI,CAACJ,EAAS,GACZ,MAAM,IAAI,MAAM,qCAAqCA,EAAS,UAAU,EAAE,EAG5E,OAAOA,EAAS,KAAK,CACvB,CACF,EAKO,SAASK,EAA0BC,EAAqC,CAC7E,OAAOA,EAAQ,QAAQ,IAAI,eAAe,CAC5C,CAKO,SAASC,EAA4BD,EAAqC,CAC/E,OAAOA,EAAQ,QAAQ,IAAI,WAAW,GAAG,OAAS,IACpD,CAKO,SAASE,GAAyC,CACvD,IAAMC,EAAS,QAAQ,IAAI,kBAE3B,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,oDAAoD,EAGtE,OAAO,IAAIZ,EAAgB,CACzB,OAAAY,EACA,OAAQ,QAAQ,IAAI,iBACtB,CAAC,CACH","names":["GrowthKitServer","config","fingerprint","response","action","metadata","email","code","getFingerprintFromRequest","request","getReferralClaimFromRequest","createGrowthKitServer","apiKey"]}