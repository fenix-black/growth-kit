{"version":3,"sources":["../src/middleware.ts"],"sourcesContent":["// This file is Edge Runtime compatible - no React imports\nimport type { NextRequest, NextFetchEvent } from 'next/server';\n\n// We need to use dynamic imports to avoid importing Next.js at module evaluation time\nlet NextResponse: any;\n\nexport interface GrowthKitMiddlewareConfig {\n  apiKey: string;\n  apiUrl: string;\n  referralPath?: string;\n  redirectTo?: string;\n  debug?: boolean;\n}\n\nexport function createGrowthKitMiddleware(config: GrowthKitMiddlewareConfig) {\n  const referralPath = config.referralPath || '/r';\n  const redirectTo = config.redirectTo || '/';\n  \n  return async function growthKitMiddleware(\n    request: NextRequest,\n    event?: NextFetchEvent\n  ): Promise<any> {\n    // Dynamically import NextResponse to avoid module evaluation issues\n    if (!NextResponse) {\n      const nextServer = await import('next/server');\n      NextResponse = nextServer.NextResponse;\n    }\n    \n    const pathname = request.nextUrl.pathname;\n    \n    // Handle API proxy requests\n    if (pathname.startsWith('/api/growthkit/')) {\n      const apiPath = pathname.replace('/api/growthkit', '');\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Proxying API request to:', apiPath);\n      }\n\n      try {\n        // Build the target URL\n        const targetUrl = `${config.apiUrl}${apiPath}`;\n        \n        // Prepare headers for the proxied request\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${config.apiKey}`,\n        };\n\n        // Forward specific headers from the original request\n        const forwardHeaders = ['X-Fingerprint', 'User-Agent', 'Accept-Language'];\n        forwardHeaders.forEach(headerName => {\n          const value = request.headers.get(headerName);\n          if (value) {\n            headers[headerName] = value;\n          }\n        });\n\n        // Prepare the request body\n        let body: string | undefined;\n        if (request.method !== 'GET' && request.method !== 'HEAD') {\n          body = await request.text();\n        }\n\n        // Make the proxied request\n        const response = await fetch(targetUrl, {\n          method: request.method,\n          headers,\n          body,\n        });\n\n        // Get the response data\n        const data = await response.text();\n        \n        if (config.debug) {\n          console.log('[GrowthKit] Proxy response status:', response.status);\n        }\n\n        // Create the response with the same status and headers\n        const proxyResponse = NextResponse.next();\n        \n        // Clear the response and set new content\n        const finalResponse = new NextResponse(data, {\n          status: response.status,\n          statusText: response.statusText,\n        });\n\n        // Forward relevant response headers\n        const responseHeaders = ['Content-Type'];\n        responseHeaders.forEach(headerName => {\n          const value = response.headers.get(headerName);\n          if (value) {\n            finalResponse.headers.set(headerName, value);\n          }\n        });\n\n        // Add CORS headers for browser requests\n        finalResponse.headers.set('Access-Control-Allow-Origin', '*');\n        finalResponse.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n        finalResponse.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Fingerprint');\n\n        return finalResponse;\n\n      } catch (error) {\n        if (config.debug) {\n          console.error('[GrowthKit] Proxy error:', error);\n        }\n        \n        return new NextResponse(\n          JSON.stringify({ \n            error: 'Proxy request failed',\n            message: error instanceof Error ? error.message : 'Unknown error'\n          }),\n          { \n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          }\n        );\n      }\n    }\n    \n    // Handle email verification\n    if (pathname === '/verify') {\n      const token = request.nextUrl.searchParams.get('token');\n      \n      if (!token) {\n        if (config.debug) {\n          console.warn('[GrowthKit] Missing verification token');\n        }\n        const redirectUrl = new URL(redirectTo, request.url);\n        redirectUrl.searchParams.set('verified', 'false');\n        redirectUrl.searchParams.set('error', 'missing-token');\n        return NextResponse.redirect(redirectUrl);\n      }\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Processing email verification with token');\n      }\n      \n      try {\n        // Verify the email token via GrowthKit API (using email + token mode)\n        const verifyResponse = await fetch(`${config.apiUrl}/v1/verify/email`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${config.apiKey}`,\n          },\n          body: JSON.stringify({ \n            token\n          }),\n        });\n        \n        const redirectUrl = new URL(redirectTo, request.url);\n        \n        if (verifyResponse.ok) {\n          if (config.debug) {\n            console.log('[GrowthKit] Email verified successfully');\n          }\n          redirectUrl.searchParams.set('verified', 'true');\n        } else {\n          if (config.debug) {\n            console.error('[GrowthKit] Email verification failed:', verifyResponse.status);\n          }\n          redirectUrl.searchParams.set('verified', 'false');\n        }\n        \n        return NextResponse.redirect(redirectUrl);\n        \n      } catch (error) {\n        if (config.debug) {\n          console.error('[GrowthKit] Error verifying email:', error);\n        }\n        const redirectUrl = new URL(redirectTo, request.url);\n        redirectUrl.searchParams.set('verified', 'false');\n        redirectUrl.searchParams.set('error', 'verification-failed');\n        return NextResponse.redirect(redirectUrl);\n      }\n    }\n    \n    // Check if this is an invitation link\n    if (pathname.startsWith('/invite/')) {\n      const inviteCode = pathname.slice('/invite/'.length).split('/')[0];\n      \n      if (!inviteCode) {\n        if (config.debug) {\n          console.warn('[GrowthKit] No invitation code found in path:', pathname);\n        }\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Processing invitation code:', inviteCode);\n      }\n      \n      // Redirect with invitation code as ref parameter (same as referral flow)\n      const redirectUrl = new URL(redirectTo, request.url);\n      redirectUrl.searchParams.set('ref', inviteCode);\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Redirecting with invitation code to:', redirectUrl.toString());\n      }\n      \n      return NextResponse.redirect(redirectUrl);\n    }\n    \n    // Check if this is a referral link\n    if (!pathname.startsWith(referralPath + '/')) {\n      return NextResponse.next();\n    }\n    \n    // Extract referral code\n    const code = pathname.slice(referralPath.length + 1).split('/')[0];\n    \n    if (!code) {\n      if (config.debug) {\n        console.warn('[GrowthKit] No referral code found in path:', pathname);\n      }\n      return NextResponse.redirect(new URL(redirectTo, request.url));\n    }\n    \n    if (config.debug) {\n      console.log('[GrowthKit] Processing referral code:', code);\n    }\n    \n    try {\n      // Exchange the referral code for a claim token via GrowthKit API\n      const exchangeResponse = await fetch(`${config.apiUrl}/v1/referral/exchange`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${config.apiKey}`,\n        },\n        body: JSON.stringify({ referralCode: code }),\n      });\n      \n      if (!exchangeResponse.ok) {\n        if (config.debug) {\n          console.error('[GrowthKit] Failed to exchange referral code:', exchangeResponse.status);\n        }\n        // Invalid code, redirect without claim\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      const data = await exchangeResponse.json();\n      const claimToken = data.data?.claim;\n      \n      if (!claimToken) {\n        if (config.debug) {\n          console.error('[GrowthKit] No claim token received from exchange');\n        }\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      // Redirect to app with claim token as URL parameter\n      // The useGrowthKit hook will detect this and process it\n      const redirectUrl = new URL(redirectTo, request.url);\n      redirectUrl.searchParams.set('ref', claimToken);\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Redirecting with claim token to:', redirectUrl.toString());\n      }\n      \n      return NextResponse.redirect(redirectUrl);\n      \n    } catch (error) {\n      if (config.debug) {\n        console.error('[GrowthKit] Error processing referral:', error);\n      }\n      // On error, redirect without claim\n      return NextResponse.redirect(new URL(redirectTo, request.url));\n    }\n  };\n}\n\nexport async function growthKitMiddleware(\n  request: NextRequest,\n  event?: NextFetchEvent\n): Promise<any> {\n  const apiKey = process.env.GROWTHKIT_API_KEY;\n  const apiUrl = process.env.GROWTHKIT_API_URL;\n  \n  if (!apiKey || !apiUrl) {\n    console.error('[GrowthKit] GROWTHKIT_API_KEY and GROWTHKIT_API_URL environment variables are required');\n    if (!NextResponse) {\n      const nextServer = await import('next/server');\n      NextResponse = nextServer.NextResponse;\n    }\n    return NextResponse.next();\n  }\n  \n  const handler = createGrowthKitMiddleware({\n    apiKey,\n    apiUrl,\n    debug: process.env.NODE_ENV === 'development'\n  });\n  \n  return handler(request, event);\n}"],"mappings":"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","names":["middleware_exports","__export","createGrowthKitMiddleware","growthKitMiddleware","__toCommonJS","NextResponse","config","referralPath","redirectTo","request","event","pathname","apiPath","targetUrl","headers","headerName","value","body","response","data","proxyResponse","finalResponse","error","token","redirectUrl","verifyResponse","inviteCode","code","exchangeResponse","claimToken","apiKey","apiUrl"]}