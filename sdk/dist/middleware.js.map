{"version":3,"sources":["../src/middleware.ts"],"sourcesContent":["// This file is Edge Runtime compatible - no React imports\nimport type { NextRequest, NextFetchEvent } from 'next/server';\n\n// We need to use dynamic imports to avoid importing Next.js at module evaluation time\nlet NextResponse: any;\n\nexport interface GrowthKitMiddlewareConfig {\n  apiKey: string;\n  apiUrl: string;\n  referralPath?: string;\n  redirectTo?: string;\n  debug?: boolean;\n}\n\nexport function createGrowthKitMiddleware(config: GrowthKitMiddlewareConfig) {\n  const referralPath = config.referralPath || '/r';\n  const redirectTo = config.redirectTo || '/';\n  \n  return async function growthKitMiddleware(\n    request: NextRequest,\n    event?: NextFetchEvent\n  ): Promise<any> {\n    // Dynamically import NextResponse to avoid module evaluation issues\n    if (!NextResponse) {\n      const nextServer = await import('next/server');\n      NextResponse = nextServer.NextResponse;\n    }\n    \n    const pathname = request.nextUrl.pathname;\n    \n    // Handle email verification\n    if (pathname === '/verify') {\n      const token = request.nextUrl.searchParams.get('token');\n      \n      if (!token) {\n        if (config.debug) {\n          console.warn('[GrowthKit] Missing verification token');\n        }\n        const redirectUrl = new URL(redirectTo, request.url);\n        redirectUrl.searchParams.set('verified', 'false');\n        redirectUrl.searchParams.set('error', 'missing-token');\n        return NextResponse.redirect(redirectUrl);\n      }\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Processing email verification with token');\n      }\n      \n      try {\n        // Verify the email token via GrowthKit API (using email + token mode)\n        const verifyResponse = await fetch(`${config.apiUrl}/v1/verify/email`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${config.apiKey}`,\n          },\n          body: JSON.stringify({ \n            token\n          }),\n        });\n        \n        const redirectUrl = new URL(redirectTo, request.url);\n        \n        if (verifyResponse.ok) {\n          if (config.debug) {\n            console.log('[GrowthKit] Email verified successfully');\n          }\n          redirectUrl.searchParams.set('verified', 'true');\n        } else {\n          if (config.debug) {\n            console.error('[GrowthKit] Email verification failed:', verifyResponse.status);\n          }\n          redirectUrl.searchParams.set('verified', 'false');\n        }\n        \n        return NextResponse.redirect(redirectUrl);\n        \n      } catch (error) {\n        if (config.debug) {\n          console.error('[GrowthKit] Error verifying email:', error);\n        }\n        const redirectUrl = new URL(redirectTo, request.url);\n        redirectUrl.searchParams.set('verified', 'false');\n        redirectUrl.searchParams.set('error', 'verification-failed');\n        return NextResponse.redirect(redirectUrl);\n      }\n    }\n    \n    // Check if this is an invitation link\n    if (pathname.startsWith('/invite/')) {\n      const inviteCode = pathname.slice('/invite/'.length).split('/')[0];\n      \n      if (!inviteCode) {\n        if (config.debug) {\n          console.warn('[GrowthKit] No invitation code found in path:', pathname);\n        }\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Processing invitation code:', inviteCode);\n      }\n      \n      // Redirect with invitation code as ref parameter (same as referral flow)\n      const redirectUrl = new URL(redirectTo, request.url);\n      redirectUrl.searchParams.set('ref', inviteCode);\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Redirecting with invitation code to:', redirectUrl.toString());\n      }\n      \n      return NextResponse.redirect(redirectUrl);\n    }\n    \n    // Check if this is a referral link\n    if (!pathname.startsWith(referralPath + '/')) {\n      return NextResponse.next();\n    }\n    \n    // Extract referral code\n    const code = pathname.slice(referralPath.length + 1).split('/')[0];\n    \n    if (!code) {\n      if (config.debug) {\n        console.warn('[GrowthKit] No referral code found in path:', pathname);\n      }\n      return NextResponse.redirect(new URL(redirectTo, request.url));\n    }\n    \n    if (config.debug) {\n      console.log('[GrowthKit] Processing referral code:', code);\n    }\n    \n    try {\n      // Exchange the referral code for a claim token via GrowthKit API\n      const exchangeResponse = await fetch(`${config.apiUrl}/v1/referral/exchange`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${config.apiKey}`,\n        },\n        body: JSON.stringify({ referralCode: code }),\n      });\n      \n      if (!exchangeResponse.ok) {\n        if (config.debug) {\n          console.error('[GrowthKit] Failed to exchange referral code:', exchangeResponse.status);\n        }\n        // Invalid code, redirect without claim\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      const data = await exchangeResponse.json();\n      const claimToken = data.data?.claim;\n      \n      if (!claimToken) {\n        if (config.debug) {\n          console.error('[GrowthKit] No claim token received from exchange');\n        }\n        return NextResponse.redirect(new URL(redirectTo, request.url));\n      }\n      \n      // Redirect to app with claim token as URL parameter\n      // The useGrowthKit hook will detect this and process it\n      const redirectUrl = new URL(redirectTo, request.url);\n      redirectUrl.searchParams.set('ref', claimToken);\n      \n      if (config.debug) {\n        console.log('[GrowthKit] Redirecting with claim token to:', redirectUrl.toString());\n      }\n      \n      return NextResponse.redirect(redirectUrl);\n      \n    } catch (error) {\n      if (config.debug) {\n        console.error('[GrowthKit] Error processing referral:', error);\n      }\n      // On error, redirect without claim\n      return NextResponse.redirect(new URL(redirectTo, request.url));\n    }\n  };\n}\n\nexport async function growthKitMiddleware(\n  request: NextRequest,\n  event?: NextFetchEvent\n): Promise<any> {\n  const apiKey = process.env.GROWTHKIT_API_KEY;\n  const apiUrl = process.env.GROWTHKIT_API_URL;\n  \n  if (!apiKey || !apiUrl) {\n    console.error('[GrowthKit] GROWTHKIT_API_KEY and GROWTHKIT_API_URL environment variables are required');\n    if (!NextResponse) {\n      const nextServer = await import('next/server');\n      NextResponse = nextServer.NextResponse;\n    }\n    return NextResponse.next();\n  }\n  \n  const handler = createGrowthKitMiddleware({\n    apiKey,\n    apiUrl,\n    debug: process.env.NODE_ENV === 'development'\n  });\n  \n  return handler(request, event);\n}"],"mappings":"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","names":["middleware_exports","__export","createGrowthKitMiddleware","growthKitMiddleware","__toCommonJS","NextResponse","config","referralPath","redirectTo","request","event","pathname","token","redirectUrl","verifyResponse","error","inviteCode","code","exchangeResponse","claimToken","apiKey","apiUrl"]}