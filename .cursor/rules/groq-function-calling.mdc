---
description: Guidelines for implementing function calling with Groq API - correct patterns and common pitfalls
---

# Groq API Function Calling - KISS Guide

## ‚úÖ The Correct Pattern

Groq function calling requires a specific message flow. Follow this pattern exactly:

### 1. First LLM Call (With Tools)

```typescript
// Build simple messages
const messages = [
  { role: 'user', content: 'Schedule a meeting' }
];

// Call LLM with tools
const response = await llmService.chat(
  messages,
  systemPrompt,
  functions,  // Array of function definitions
  model
);

// Response includes:
// - content: string
// - functionCalls: FunctionCall[] (our parsed version)
// - rawToolCalls: any[] (Groq's full structure with IDs)
```

### 2. Execute Functions & Build Message History

```typescript
if (response.functionCalls && response.rawToolCalls) {
  const messagesForSecondCall = [
    ...messages,
    {
      role: 'assistant',
      content: response.content || '',
      tool_calls: response.rawToolCalls  // ‚úÖ Full structure with IDs
    }
  ];
  
  // Execute each function and add tool role messages
  for (const toolCall of response.rawToolCalls) {
    const result = await executeFunction(toolCall);
    
    messagesForSecondCall.push({
      role: 'tool',  // ‚úÖ Use 'tool' role, not 'assistant'
      tool_call_id: toolCall.id,  // ‚úÖ Must match the tool call ID
      name: toolCall.function.name,
      content: JSON.stringify(result || { success: true })
    });
  }
}
```

### 3. Second LLM Call (Without Tools)

```typescript
// Second call with full message history
const finalResponse = await llmService.chat(
  messagesForSecondCall,
  systemPrompt,
  undefined,  // ‚úÖ Don't pass functions parameter at all
  model
);
```

## ‚ùå Common Mistakes (DO NOT DO THESE)

### Mistake #1: Passing Empty Array on Second Call
```typescript
// ‚ùå WRONG - causes "Tool choice is none, but model called a tool" error
const response = await llmService.chat(
  messages,
  systemPrompt,
  [],  // ‚ùå Empty array sets tool_choice to 'none'
  model
);
```

**Fix**: Pass `undefined` or omit the parameter entirely.

### Mistake #2: Wrong Message Format
```typescript
// ‚ùå WRONG - metadata is not a valid field
messagesForSecondCall.push({
  role: 'assistant',
  content: response.content,
  metadata: { functionCalls: response.functionCalls }  // ‚ùå Wrong format
});
```

**Fix**: Use proper `tool_calls` structure from Groq's response.

### Mistake #3: Not Using 'tool' Role
```typescript
// ‚ùå WRONG - using assistant role for function results
messagesForSecondCall.push({
  role: 'assistant',  // ‚ùå Wrong role
  content: JSON.stringify(result)
});
```

**Fix**: Always use `role: 'tool'` for function results.

### Mistake #4: Losing Tool Call IDs
```typescript
// ‚ùå WRONG - not preserving tool_call IDs
const functionCalls = response.tool_calls.map(tc => ({
  name: tc.function.name,
  arguments: JSON.parse(tc.function.arguments)
  // ‚ùå Lost tc.id - can't match results to calls
}));
```

**Fix**: Preserve the full `rawToolCalls` structure with IDs.

## üîß Implementation Checklist

When implementing function calling:

- [ ] LLMResponse includes `rawToolCalls?: any[]` field
- [ ] LLM service preserves full tool_calls structure from Groq
- [ ] First call passes function definitions array
- [ ] Build message history with assistant's `tool_calls`
- [ ] Add `role: 'tool'` messages for each result
- [ ] Each tool message has matching `tool_call_id`
- [ ] Second call passes `undefined` for functions (not `[]`)
- [ ] Temperature set to 0.1-0.3 for reliable function calling

## üéØ Key Insights

1. **Never pass empty array**: `[]` makes Groq set `tool_choice: 'none'`
2. **Preserve IDs**: Tool call IDs are required for proper threading
3. **Use 'tool' role**: Function results must use `role: 'tool'`
4. **Pass through messages**: Don't map/transform messages on second call
5. **Lower temperature**: Use 0.2 for deterministic function calling

## üìö References

- Groq API Cookbook: https://github.com/groq/groq-api-cookbook
- Pattern source: `tutorials/function-calling-101-ecommerce/`
- Error: "Tool choice is none, but model called a tool" = empty array issue
